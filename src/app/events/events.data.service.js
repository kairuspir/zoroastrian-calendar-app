"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var event_1 = require("./event");
var calendar_data_service_1 = require("../calendar/calendar.data.service");
var Sqlite = require("nativescript-sqlite");
var EventsDataService = /** @class */ (function () {
    function EventsDataService(calendarDataService) {
        var _this = this;
        this.calendarDataService = calendarDataService;
        (new Sqlite("ZoroastrianCalendarSQLite.db3")).then(function (db) {
            db.execSQL("CREATE TABLE IF NOT EXISTS CalendarEvent(id INTEGER PRIMARY KEY AUTOINCREMENT, rojId INTEGER, mahId, INTEGER, sal INTEGER, title TEXT, description TEXT, calendarType TEXT, isPreloaded INTEGER, isDeleted INTEGER)").then(function (id) {
                _this.database = db;
            }, function (error) {
                console.log("CREATE TABLE ERROR", error);
            });
        }, function (error) {
            console.error("OPEN DB ERROR", error);
        });
    }
    EventsDataService.prototype.getAll = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.database.all("SELECT * FROM CalendarEvent WHERE isDeleted = 0").then(function (rows) { return __awaiter(_this, void 0, void 0, function () {
                            var row;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        this.events = new Array();
                                        for (row in rows) {
                                            this.events.push(new event_1.ZCalendarEvent(rows[row][0], rows[row][1], rows[row][2], rows[row][3], rows[row][4], rows[row][5], rows[row][6]));
                                        }
                                        return [4 /*yield*/, this.events];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); }, function (error) {
                            console.log("SELECT ERROR", error);
                        })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    EventsDataService.prototype.getRecurringEventsForDay = function (date) {
        var _this = this;
        var rojId = this.calendarDataService.getRojId(date.roj);
        var mahId = this.calendarDataService.getMahId(date.mah);
        var calendarType = date.calendarType;
        return this.database.all("SELECT * FROM CalendarEvent WHERE isDeleted = 0 and rojId = ? and mahId = ? and calendarType = ?", [rojId, mahId, calendarType]).then(function (rows) {
            _this.events = new Array();
            for (var row in rows) {
                _this.events.push(new event_1.ZCalendarEvent(rows[row][0], rows[row][1], rows[row][2], rows[row][3], rows[row][4], rows[row][5], rows[row][6]));
            }
            return _this.events;
        }, function (error) {
            console.log("SELECT ERROR", error);
        });
    };
    EventsDataService.prototype.upsert = function (entity) {
        if (entity.id === 0) {
            return this.database.execSQL("INSERT INTO CalendarEvent (rojId, mahId, sal, title, description, calendarType, isPreloaded, isDeleted) VALUES (?, ?, ?, ?, ?, ?, ?, ?)", [entity.rojId, entity.mahId, entity.sal, entity.title, entity.description, entity.calendarType, 0, 0]).then(function (id) {
                entity.id = id;
                return entity;
            }, function (error) {
                console.log("INSERT ERROR", error);
            });
        }
        else {
            return this.database.execSQL("UPDATE CalendarEvent SET rojId = ?, mahId = ?, sal = ?, title = ?, description = ?, calendarType = ? WHERE id = ?", [entity.rojId, entity.mahId, entity.sal, entity.title, entity.description, entity.calendarType, entity.id]).then(function (noOfRecords) {
                if (noOfRecords !== 1) {
                    console.log("UPSERT ERROR - number of records updated: " + noOfRecords + ", expected: 1");
                }
                return entity;
            }, function (error) {
                console.log("UPDATE ERROR", error);
            });
        }
    };
    EventsDataService.prototype.recycle = function (entity) {
        return this.database.execSQL("UPDATE CalendarEvent SET isDeleted = ? WHERE id = ?", [1, entity.id]).then(function (noOfRecords) {
            if (noOfRecords !== 1) {
                console.log("RECYCLE ERROR - number of records updated: " + noOfRecords + ", expected: 1");
            }
            return noOfRecords;
        }, function (error) {
            console.log("UPDATE ERROR", error);
        });
    };
    EventsDataService.prototype.restore = function (entity) {
        return this.database.execSQL("UPDATE CalendarEvent SET isDeleted = ? WHERE id = ?", [0, entity.id]).then(function (noOfRecords) {
            if (noOfRecords !== 1) {
                console.log("RESTORE ERROR - number of records updated: " + noOfRecords + ", expected: 1");
            }
            return noOfRecords;
        }, function (error) {
            console.log("UPDATE ERROR", error);
        });
    };
    EventsDataService.prototype.purge = function (entity) {
        return this.database.execSQL("DELETE FROM CalendarEvent WHERE id = ?", [entity.id]).then(function (noOfRecords) {
            if (noOfRecords !== 1) {
                console.log("PURGE ERROR - number of records updated: " + noOfRecords + ", expected: 1");
            }
            return noOfRecords;
        }, function (error) {
            console.log("DELETE ERROR", error);
        });
    };
    EventsDataService = __decorate([
        core_1.Injectable({
            providedIn: "root"
        }),
        __metadata("design:paramtypes", [calendar_data_service_1.CalendarDataService])
    ], EventsDataService);
    return EventsDataService;
}());
exports.EventsDataService = EventsDataService;
//# sourceMappingURL=data:application/json;base64,