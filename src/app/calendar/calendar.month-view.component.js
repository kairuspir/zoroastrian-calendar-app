"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var calendar_business_service_1 = require("./calendar.business.service");
var nativescript_ui_calendar_1 = require("nativescript-ui-calendar");
var platform_1 = require("tns-core-modules/platform");
var events_business_service_1 = require("../events/events.business.service");
var CalendarMonthViewComponent = /** @class */ (function () {
    function CalendarMonthViewComponent(calendarService, eventService) {
        this.calendarService = calendarService;
        this.eventService = eventService;
    }
    CalendarMonthViewComponent.prototype.ngOnInit = function () {
        this.viewMode = nativescript_ui_calendar_1.CalendarViewMode.Month;
        this.calendarHeight = platform_1.screen.mainScreen.heightDIPs / 2;
        this.selectedDate = new Date().toISOString();
        this.setDate(new Date());
    };
    CalendarMonthViewComponent.prototype.onDateSelected = function (args) {
        var calendar = args.object;
        this.setDate(args.date);
    };
    CalendarMonthViewComponent.prototype.setDate = function (input) {
        var _this = this;
        this.zDate = this.calendarService.convertGregorianToShahanshahi(input);
        this.eventService.getEventsForDay(input).then(function (value) {
            _this.selectedDayEvents = value;
        });
    };
    CalendarMonthViewComponent.prototype.onItemTap = function (args) {
        console.log("Item Tapped at cell index: " + args.index);
    };
    CalendarMonthViewComponent.prototype.onNavigatedToDate = function (args) {
        var _this = this;
        this.eventService.getEventsForMonth(args.date).then(function (value) {
            _this.calendarEvents = value;
        });
    };
    CalendarMonthViewComponent.prototype.addEvent = function (args) {
        var today = new Date();
        var zToday = this.calendarService.convertGregorianToShahanshahi(today);
        var yesterday = new Date();
        yesterday.setHours(-24);
        var zYesterday = this.calendarService.convertGregorianToShahanshahi(yesterday);
        var tomorrow = new Date();
        tomorrow.setHours(24);
        var zTomorrow = this.calendarService.convertGregorianToShahanshahi(tomorrow);
        this.eventService.addEvent(zToday, "today", "");
        this.eventService.addEvent(zYesterday, "yesterday", "");
        this.eventService.addEvent(zTomorrow, "tomorrow", "");
    };
    CalendarMonthViewComponent.prototype.deleteAllEvents = function (args) {
        this.eventService.deleteAllEvents();
    };
    CalendarMonthViewComponent = __decorate([
        core_1.Component({
            selector: "cal-month-view",
            moduleId: module.id,
            templateUrl: "./calendar.month-view.component.html",
        }),
        __metadata("design:paramtypes", [calendar_business_service_1.CalendarBusinessService, events_business_service_1.EventsBusinessService])
    ], CalendarMonthViewComponent);
    return CalendarMonthViewComponent;
}());
exports.CalendarMonthViewComponent = CalendarMonthViewComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIubW9udGgtdmlldy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJjYWxlbmRhci5tb250aC12aWV3LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUFBLHNDQUFrRDtBQUNsRCx5RUFBc0U7QUFDdEUscUVBQWlKO0FBQ2pKLHNEQUE2RTtBQUc3RSw2RUFBMEU7QUFPMUU7SUFPSSxvQ0FBb0IsZUFBd0MsRUFBVSxZQUFtQztRQUFyRixvQkFBZSxHQUFmLGVBQWUsQ0FBeUI7UUFBVSxpQkFBWSxHQUFaLFlBQVksQ0FBdUI7SUFDekcsQ0FBQztJQUVELDZDQUFRLEdBQVI7UUFDSSxJQUFJLENBQUMsUUFBUSxHQUFHLDJDQUFnQixDQUFDLEtBQUssQ0FBQztRQUN2QyxJQUFJLENBQUMsY0FBYyxHQUFHLGlCQUFNLENBQUMsVUFBVSxDQUFDLFVBQVUsR0FBRyxDQUFDLENBQUM7UUFDdkQsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQzdDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0lBQzdCLENBQUM7SUFFRCxtREFBYyxHQUFkLFVBQWUsSUFBZ0M7UUFDM0MsSUFBTSxRQUFRLEdBQWdCLElBQUksQ0FBQyxNQUFNLENBQUM7UUFDMUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDNUIsQ0FBQztJQUVELDRDQUFPLEdBQVAsVUFBUSxLQUFXO1FBQW5CLGlCQUtDO1FBSkcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLDZCQUE2QixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxZQUFZLENBQUMsZUFBZSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksQ0FBQyxVQUFBLEtBQUs7WUFDL0MsS0FBSSxDQUFDLGlCQUFpQixHQUFHLEtBQUssQ0FBQztRQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFRCw4Q0FBUyxHQUFULFVBQVUsSUFBSTtRQUNWLE9BQU8sQ0FBQyxHQUFHLENBQUMsNkJBQTZCLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQzVELENBQUM7SUFFRCxzREFBaUIsR0FBakIsVUFBa0IsSUFBaUM7UUFBbkQsaUJBSUM7UUFIRyxJQUFJLENBQUMsWUFBWSxDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBQSxLQUFLO1lBQ3JELEtBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1FBQ2hDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELDZDQUFRLEdBQVIsVUFBUyxJQUFlO1FBQ3BCLElBQUksS0FBSyxHQUFHLElBQUksSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyw2QkFBNkIsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUN2RSxJQUFJLFNBQVMsR0FBRyxJQUFJLElBQUksRUFBRSxDQUFDO1FBQzNCLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN4QixJQUFJLFVBQVUsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLDZCQUE2QixDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQy9FLElBQUksUUFBUSxHQUFHLElBQUksSUFBSSxFQUFFLENBQUE7UUFDekIsUUFBUSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUN0QixJQUFJLFNBQVMsR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDLDZCQUE2QixDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzdFLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBRSxPQUFPLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDaEQsSUFBSSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsVUFBVSxFQUFFLFdBQVcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUN4RCxJQUFJLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUUsVUFBVSxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCxvREFBZSxHQUFmLFVBQWdCLElBQWU7UUFDM0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsQ0FBQztJQUN4QyxDQUFDO0lBdkRRLDBCQUEwQjtRQUx0QyxnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLGdCQUFnQjtZQUMxQixRQUFRLEVBQUUsTUFBTSxDQUFDLEVBQUU7WUFDbkIsV0FBVyxFQUFFLHNDQUFzQztTQUN0RCxDQUFDO3lDQVF1QyxtREFBdUIsRUFBd0IsK0NBQXFCO09BUGhHLDBCQUEwQixDQXdEdEM7SUFBRCxpQ0FBQztDQUFBLEFBeERELElBd0RDO0FBeERZLGdFQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIjtcclxuaW1wb3J0IHsgQ2FsZW5kYXJCdXNpbmVzc1NlcnZpY2UgfSBmcm9tIFwiLi9jYWxlbmRhci5idXNpbmVzcy5zZXJ2aWNlXCI7XHJcbmltcG9ydCB7IENhbGVuZGFyU2VsZWN0aW9uRXZlbnREYXRhLCBSYWRDYWxlbmRhciwgQ2FsZW5kYXJFdmVudCwgQ2FsZW5kYXJWaWV3TW9kZSwgQ2FsZW5kYXJOYXZpZ2F0aW9uRXZlbnREYXRhIH0gZnJvbSBcIm5hdGl2ZXNjcmlwdC11aS1jYWxlbmRhclwiO1xyXG5pbXBvcnQgeyBpc0FuZHJvaWQsIGlzSU9TLCBkZXZpY2UsIHNjcmVlbiB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL3BsYXRmb3JtXCI7XHJcbmltcG9ydCB7IFpEYXRlIH0gZnJvbSBcIi4vY2FsZW5kYXIubW9kZWxzXCI7XHJcbmltcG9ydCB7IEV2ZW50RGF0YSB9IGZyb20gXCJ0bnMtY29yZS1tb2R1bGVzL2RhdGEvb2JzZXJ2YWJsZS9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7IEV2ZW50c0J1c2luZXNzU2VydmljZSB9IGZyb20gXCIuLi9ldmVudHMvZXZlbnRzLmJ1c2luZXNzLnNlcnZpY2VcIjtcclxuXHJcbkBDb21wb25lbnQoe1xyXG4gICAgc2VsZWN0b3I6IFwiY2FsLW1vbnRoLXZpZXdcIixcclxuICAgIG1vZHVsZUlkOiBtb2R1bGUuaWQsXHJcbiAgICB0ZW1wbGF0ZVVybDogXCIuL2NhbGVuZGFyLm1vbnRoLXZpZXcuY29tcG9uZW50Lmh0bWxcIixcclxufSlcclxuZXhwb3J0IGNsYXNzIENhbGVuZGFyTW9udGhWaWV3Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcclxuICAgIHZpZXdNb2RlOiBzdHJpbmc7XHJcbiAgICBzZWxlY3RlZERhdGU6IHN0cmluZztcclxuICAgIHpEYXRlOiBaRGF0ZTtcclxuICAgIHNlbGVjdGVkRGF5RXZlbnRzOiBBcnJheTxDYWxlbmRhckV2ZW50PjtcclxuICAgIGNhbGVuZGFyRXZlbnRzOiBBcnJheTxDYWxlbmRhckV2ZW50PjtcclxuICAgIGNhbGVuZGFySGVpZ2h0OiBudW1iZXI7XHJcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNhbGVuZGFyU2VydmljZTogQ2FsZW5kYXJCdXNpbmVzc1NlcnZpY2UsIHByaXZhdGUgZXZlbnRTZXJ2aWNlOiBFdmVudHNCdXNpbmVzc1NlcnZpY2UpIHtcclxuICAgIH1cclxuXHJcbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcclxuICAgICAgICB0aGlzLnZpZXdNb2RlID0gQ2FsZW5kYXJWaWV3TW9kZS5Nb250aDtcclxuICAgICAgICB0aGlzLmNhbGVuZGFySGVpZ2h0ID0gc2NyZWVuLm1haW5TY3JlZW4uaGVpZ2h0RElQcyAvIDI7XHJcbiAgICAgICAgdGhpcy5zZWxlY3RlZERhdGUgPSBuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCk7XHJcbiAgICAgICAgdGhpcy5zZXREYXRlKG5ldyBEYXRlKCkpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uRGF0ZVNlbGVjdGVkKGFyZ3M6IENhbGVuZGFyU2VsZWN0aW9uRXZlbnREYXRhKSB7XHJcbiAgICAgICAgY29uc3QgY2FsZW5kYXI6IFJhZENhbGVuZGFyID0gYXJncy5vYmplY3Q7XHJcbiAgICAgICAgdGhpcy5zZXREYXRlKGFyZ3MuZGF0ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0RGF0ZShpbnB1dDogRGF0ZSk6IHZvaWQge1xyXG4gICAgICAgIHRoaXMuekRhdGUgPSB0aGlzLmNhbGVuZGFyU2VydmljZS5jb252ZXJ0R3JlZ29yaWFuVG9TaGFoYW5zaGFoaShpbnB1dCk7XHJcbiAgICAgICAgdGhpcy5ldmVudFNlcnZpY2UuZ2V0RXZlbnRzRm9yRGF5KGlucHV0KS50aGVuKHZhbHVlID0+IHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZERheUV2ZW50cyA9IHZhbHVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIG9uSXRlbVRhcChhcmdzKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coXCJJdGVtIFRhcHBlZCBhdCBjZWxsIGluZGV4OiBcIiArIGFyZ3MuaW5kZXgpO1xyXG4gICAgfVxyXG5cclxuICAgIG9uTmF2aWdhdGVkVG9EYXRlKGFyZ3M6IENhbGVuZGFyTmF2aWdhdGlvbkV2ZW50RGF0YSkge1xyXG4gICAgICAgIHRoaXMuZXZlbnRTZXJ2aWNlLmdldEV2ZW50c0Zvck1vbnRoKGFyZ3MuZGF0ZSkudGhlbih2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuY2FsZW5kYXJFdmVudHMgPSB2YWx1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRFdmVudChhcmdzOiBFdmVudERhdGEpIHtcclxuICAgICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIHZhciB6VG9kYXkgPSB0aGlzLmNhbGVuZGFyU2VydmljZS5jb252ZXJ0R3JlZ29yaWFuVG9TaGFoYW5zaGFoaSh0b2RheSk7XHJcbiAgICAgICAgdmFyIHllc3RlcmRheSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgeWVzdGVyZGF5LnNldEhvdXJzKC0yNCk7XHJcbiAgICAgICAgdmFyIHpZZXN0ZXJkYXkgPSB0aGlzLmNhbGVuZGFyU2VydmljZS5jb252ZXJ0R3JlZ29yaWFuVG9TaGFoYW5zaGFoaSh5ZXN0ZXJkYXkpO1xyXG4gICAgICAgIHZhciB0b21vcnJvdyA9IG5ldyBEYXRlKClcclxuICAgICAgICB0b21vcnJvdy5zZXRIb3VycygyNCk7XHJcbiAgICAgICAgdmFyIHpUb21vcnJvdyA9IHRoaXMuY2FsZW5kYXJTZXJ2aWNlLmNvbnZlcnRHcmVnb3JpYW5Ub1NoYWhhbnNoYWhpKHRvbW9ycm93KTtcclxuICAgICAgICB0aGlzLmV2ZW50U2VydmljZS5hZGRFdmVudCh6VG9kYXksIFwidG9kYXlcIiwgXCJcIik7XHJcbiAgICAgICAgdGhpcy5ldmVudFNlcnZpY2UuYWRkRXZlbnQoelllc3RlcmRheSwgXCJ5ZXN0ZXJkYXlcIiwgXCJcIik7XHJcbiAgICAgICAgdGhpcy5ldmVudFNlcnZpY2UuYWRkRXZlbnQoelRvbW9ycm93LCBcInRvbW9ycm93XCIsIFwiXCIpO1xyXG4gICAgfVxyXG5cclxuICAgIGRlbGV0ZUFsbEV2ZW50cyhhcmdzOiBFdmVudERhdGEpIHtcclxuICAgICAgICB0aGlzLmV2ZW50U2VydmljZS5kZWxldGVBbGxFdmVudHMoKTtcclxuICAgIH1cclxufSJdfQ==